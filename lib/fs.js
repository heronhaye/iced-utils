// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var fs, iced, path, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  path = require('path');

  fs = require('fs');

  exports.mkdir_p = function(d, mode, cb) {
    var cwd, err, made, p, parts, so, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (mode == null) {
      mode = 0x1ed;
    }
    parts = d.split(path.sep);
    cwd = [];
    err = null;
    made = 0;
    (function(_this) {
      return (function(__iced_k) {
        var _i, _len, _ref, _results, _while;
        _ref = parts;
        _len = _ref.length;
        _i = 0;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++_i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(_i < _len)) {
            return _break();
          } else {
            p = _ref[_i];
            if (err == null) {
              cwd.push(p);
              d = path.join.apply(null, cwd);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/iced-utils/src/fs.iced",
                  funcname: "mkdir_p"
                });
                fs.stat(d, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return so = arguments[1];
                    };
                  })(),
                  lineno: 14
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if ((err != null) && err.code !== 'ENOENT') {
                    return __iced_k(err = "In directory " + d + ": " + (err.toString()));
                  } else {
                    (function(__iced_k) {
                      if (typeof so !== "undefined" && so !== null) {
                        return __iced_k(!so.isDirectory() ? err = "Path component " + d + " isn't a directory" : void 0);
                      } else {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/home/max/src/iced-utils/src/fs.iced",
                            funcname: "mkdir_p"
                          });
                          fs.mkdir(d, mode, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return err = arguments[0];
                              };
                            })(),
                            lineno: 20
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          made++;
                          return __iced_k(err != null ? err = "In mkdir " + d + ": " + (err.toString()) : void 0);
                        });
                      }
                    })(__iced_k);
                  }
                })(_next);
              });
            } else {
              return _continue();
            }
          }
        };
        _while(__iced_k);
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, made);
      };
    })(this));
  };

}).call(this);
